# This module has been automatically generated by a LLM.
# It is fully untested and might not work as expected.
# Patches are welcome!!!

import os
import pathlib
from findapp.posix import PosixAppFinder

class MacOSAppFinder(PosixAppFinder):
    selector = "macos"

    @classmethod
    def _get_common_paths(cls, app_name=None, **kwargs):
        """
        Search for the application in common macOS locations.
        """
        search_paths = []
        # Add common macOS application directories
        app_dirs = [
            "/Applications",
            "/System/Applications",
            str(pathlib.Path.home() / "Applications"),
        ]

        for app_dir in app_dirs:
            app_path = pathlib.Path(app_dir) / (app_name + ".app")
            if app_path.exists():
                # Applications are bundles, we need to look for the actual executable inside the bundle
                executable_path = app_path / "Contents/MacOS" / app_name
                if executable_path.exists():
                    search_paths.append(str(executable_path))
        return search_paths

    @classmethod
    def _find_app_in_common_places(cls, binary_name, search_in_common_paths=True, **kwargs):
        """
        Search for an application in common macOS locations.
        """
        if search_in_common_paths:
            search_paths = cls._get_common_paths(binary_name, **kwargs)
            path = cls._find_app_in_paths(binary_name, search_paths, **kwargs)
            if path is not None:
                return path

        return None
